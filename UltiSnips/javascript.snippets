# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

priority 1

# ES2015
snippet "c(onst)?" "const" br
const ${1} = ${2}
endsnippet

snippet "l(et)?" "let" br
let ${1} = ${2}
endsnippet

snippet "im(port|p)?" "import" br
import ${2:member} from '${1:module}'
endsnippet

snippet "ex(port|p)?" "export" br
export ${2:member} from '${1:module}'
endsnippet

snippet "ex(port|p)?" "export" br
export ${1:default }
endsnippet

snippet "\.(map|filter|forEach|reduce|find|findIndex)" "Array method with an arrow function" r
.`!p snip.rv = match.group(1)`(${1:(c, i)} => (
	$2
))
endsnippet

snippet "\.(map|filter|forEach|reduce|find|findIndex)=" "Array method with an arrow function inline" rA
.`!p snip.rv = match.group(1)`(${1:(c, i)} => $2)
endsnippet

snippet cl "console.log(...)"
console.log(${1})
endsnippet

snippet cle "console.error(...)"
console.error(${1})
endsnippet


# Testing (jest, mocha, etc)

snippet "des(cribe|cr|c)?" "Describe (js)" br
describe('${1:description}', () => {
	$0
})
endsnippet

snippet it "it (js)" b
it('${1:description}', () => {
	$0
})
endsnippet

snippet test "test (js)" b
test('${1:description}', () => {
	$0
})
endsnippet

snippet bef "before each (js)" b
beforeEach(() => {
	$0
})
endsnippet

snippet aft "after each (js)" b
afterEach(() => {
	$0
})
endsnippet

snippet befa "before all (js)" b
beforeAll(() => {
	$0
})
endsnippet

snippet afta "after all (js)" b
afterAll(() => {
	$0
})
endsnippet
